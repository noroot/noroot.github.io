<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://blog.falsetrue.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.falsetrue.io/blog/" rel="alternate" type="text/html" /><updated>2019-07-30T00:46:16+03:00</updated><id>https://blog.falsetrue.io/blog/feed.xml</id><title type="html">False!True</title><subtitle>Scripts of cyberdaemon</subtitle><entry><title type="html">Книга: 12 Rules of Life: An Antidote to Chaos</title><link href="https://blog.falsetrue.io/blog/books/2019/07/29/12-rules-of-life/" rel="alternate" type="text/html" title="Книга: 12 Rules of Life: An Antidote to Chaos" /><published>2019-07-29T15:00:00+03:00</published><updated>2019-07-29T15:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/books/2019/07/29/12-rules-of-life</id><content type="html" xml:base="https://blog.falsetrue.io/blog/books/2019/07/29/12-rules-of-life/">&lt;ul&gt;
  &lt;li&gt;Название: 12 Rules of Life: An Antidote to Chaos&lt;/li&gt;
  &lt;li&gt;Автор: Jordan Peterson&lt;/li&gt;
  &lt;li&gt;Год: 2018&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Одна из лучших книг на все времена, Доктор Jordan Peterson (о котором напишу отдельный пост), однажды задал себе вопрос, “What are the most valueable things everyone should know ?” (Какие самые ценные вещи должен знать каждый ?), и в ответ на собственный вопрос он придумал, 40 правил жизни которые оформил в виде этой книги. Книгу читает сам доктор Петерсон, что придает ей дополнительную ценность.&lt;/p&gt;

&lt;p&gt;Кратко:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Stand up straight with your shoulders back
* Treat yourself like someone you are responsible for helping
* Make friends with people who want the best for you
* Compare yourself to who you were yesterday, not to who someone else is today
* Do not let your children do anything that makes you dislike them
* Set your house in perfect order before you criticize the world
* Pursue what is meaningful (not what is expedient)
* Tell the truth – or, at least, don't lie
* Assume that the person you are listening to might know something you don't
* Be precise in your speech
* Do not bother children when they are skateboarding
* Pet a cat when you encounter one on the street
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Картинка обложки и ссылка под катом.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;https://www.audible.com/pd/12-Rules-for-Life-Audiobook/B0797YBP7N?qid=1564409608&amp;amp;sr=1-1&amp;amp;pf_rd_p=e81b7c27-6880-467a-b5a7-13cef5d729fe&amp;amp;pf_rd_r=KYGGWJ44XWRQSTWXC8EE&amp;amp;ref=a_search_c3_lProduct_1_1&quot;&gt;12 Rules of Life: An Antidote to Chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/41a6IJ0zYTL._SL500_.jpg&quot; alt=&quot;12 Rules of Life: An Antidote to Chaos&quot; title=&quot;12 Rules of Life: An Antidote to Chaos&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Название: 12 Rules of Life: An Antidote to Chaos Автор: Jordan Peterson Год: 2018</summary></entry><entry><title type="html">Память о действиях и результате</title><link href="https://blog.falsetrue.io/blog/humanity/2019/04/21/memory-result-chart/" rel="alternate" type="text/html" title="Память о действиях и результате" /><published>2019-04-21T08:00:00+03:00</published><updated>2019-04-21T08:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/humanity/2019/04/21/memory-result-chart</id><content type="html" xml:base="https://blog.falsetrue.io/blog/humanity/2019/04/21/memory-result-chart/">&lt;p&gt;График показывает как забывюатся дела которые привели к результату. Почти всегда что-то ценное не появляется сразу, а требует последовательсти дел, которая при определенном успехе приведет к ценному результату, как видно из графика, дела которые были сделаны и которые привели к результату забываеются вплоть до нуля, другими словами вы можете достигнуть желаемого, но к моменту достижения совсем забыть что к ему привело. 
Простой пример это диета, вы сьели здоровую пищу и сразу результата нет, к тому времени как от диету будет ощутимый результат, вы скорее всего забудете что именно вы ели несколько месяцев назад, и что именно это и последовательность этих дел, привела вас к желаемому ощутимому результату. Из такого временного разрыва между видимым результатом и приложенным усилием, возникает ощущение бесполезности дела, ведь результат не виден сразу, а иногда может быть не видна длительный период. 
Таким образом если вам кажется что какое-то дело является бесполезным или незначительным, - так как сразу невиден результат, то следует понимать, что результат может быть виден только как совакупный кумулятивный эффект через длительное время, и к этому времени вы скорее всего забудете что конкретно привело к этому результату.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/memory-result-chart.png&quot; alt=&quot;Memory result chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Под катом код на python для этого графика и ссылки по теме.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Ссылки:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Forgetting_curve&quot;&gt;Forgetting_curve&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.csustan.edu/sites/default/files/groups/Writing%20Program/forgetting_curve.pdf&quot;&gt;The Forgetting Curve, Dr.John Wittmann, CSU Stanislaus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Код:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Life plot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Less memory remains about cause of result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;twinx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">График показывает как забывюатся дела которые привели к результату. Почти всегда что-то ценное не появляется сразу, а требует последовательсти дел, которая при определенном успехе приведет к ценному результату, как видно из графика, дела которые были сделаны и которые привели к результату забываеются вплоть до нуля, другими словами вы можете достигнуть желаемого, но к моменту достижения совсем забыть что к ему привело. Простой пример это диета, вы сьели здоровую пищу и сразу результата нет, к тому времени как от диету будет ощутимый результат, вы скорее всего забудете что именно вы ели несколько месяцев назад, и что именно это и последовательность этих дел, привела вас к желаемому ощутимому результату. Из такого временного разрыва между видимым результатом и приложенным усилием, возникает ощущение бесполезности дела, ведь результат не виден сразу, а иногда может быть не видна длительный период. Таким образом если вам кажется что какое-то дело является бесполезным или незначительным, - так как сразу невиден результат, то следует понимать, что результат может быть виден только как совакупный кумулятивный эффект через длительное время, и к этому времени вы скорее всего забудете что конкретно привело к этому результату.</summary></entry><entry><title type="html">Brief look into WowCube SDK</title><link href="https://blog.falsetrue.io/blog/howto/2019/02/22/wowcube/" rel="alternate" type="text/html" title="Brief look into WowCube SDK" /><published>2019-02-22T23:00:00+03:00</published><updated>2019-02-22T23:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/howto/2019/02/22/wowcube</id><content type="html" xml:base="https://blog.falsetrue.io/blog/howto/2019/02/22/wowcube/">&lt;p&gt;Very brief look into WowCube software SDK.&lt;/p&gt;

&lt;p&gt;What is WowCube ? Gaming or kind of puzzle platform, based on Rubik’s cube principle. 
It uses 8 mini cubes conntected to each other with special magnet locks.
Each of mini cube is STM32 bit microcontroller with firmware written with Pawn &lt;a href=&quot;https://github.com/compuphase/pawn&quot;&gt;https://github.com/compuphase/pawn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are 8 micro computers connected to each other. Imagine how to develop any kind of program to interact between them, its complicated. &lt;a href=&quot;https://wowcube.com/sdk&quot;&gt;Official SDK&lt;/a&gt; is very weak, only what they offer is small repository &lt;a href=&quot;https://github.com/wowcube/WOWCube_Emulator_MacOS&quot;&gt;https://github.com/wowcube/WOWCube_Emulator_MacOS&lt;/a&gt; which contains everthing even commited VCcode and Processing inside for some reason, so I decide to make new one clean version to make simplier.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Lets go step by step:&lt;/p&gt;

&lt;p&gt;You need to have installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pawn language compiler&lt;/li&gt;
  &lt;li&gt;Processing language compiler (they uses it as an cube emulator during development process)&lt;/li&gt;
  &lt;li&gt;Additional UDP library &lt;a href=&quot;http://ubaa.net/shared/processing/udp/udp.zip&quot;&gt;http://ubaa.net/shared/processing/udp/udp.zip&lt;/a&gt; can be also found inside data direcotry in repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since firmware used to be launched on each of 8 microcomputers we need toolchain to do it automatically, Makefile will suits here perfectly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;compile:
	pawncc pipes.pwn &lt;span class=&quot;nt&quot;&gt;-ogame&lt;/span&gt;


dev:
	&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0 1 2 3 4 5 6 7 8 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
		pawnrun game.amx &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;i &amp;amp; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;		&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next step is you have to open ProcessingUI, and start Cube Emulator. Cube emulator interacts with firmware via UDP proto, so you will have to see results of interaction inside emulator, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wowcube/1.png&quot; alt=&quot;/images/wowcube/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In dynamic:&lt;/p&gt;

&lt;iframe width=&quot;860&quot; height=&quot;615&quot; src=&quot;https://www.youtube.com/embed/VOig1XyQ5PE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Main disadvantage is that you have to write on two langauges, one for developer emulator and graphics interactions, and another for hardware interactions itself. WowCube uses Pawn as a scripting language for microcontrollers, I believe they do something like this inside their core loader:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pawn.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;FATFS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fatfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here you need to do a platform initialization&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Mount filesystem&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f_mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Execute test script&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PawnExec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GAME.AMX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Endless loop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Summary.&lt;/p&gt;

&lt;p&gt;WowCube is definitely interesting prototype, and worth to look into it, but until it have more simple to start SDK it will be hard to attract developers. SDK it self contains Pipes game demo. You can start it with Processing and ofcourse you don’t need WowCube it self, to understand development process.&lt;/p&gt;

&lt;p&gt;My unofficial SDK package, &lt;a href=&quot;https://github.com/noroot/wowcube-sdk-unofficial&quot;&gt;https://github.com/noroot/wowcube-sdk-unofficial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Site: &lt;a href=&quot;http://wowcube.com/&quot;&gt;http://wowcube.com/&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Very brief look into WowCube software SDK.</summary></entry><entry><title type="html">Netiquette RFC1855</title><link href="https://blog.falsetrue.io/blog/history/2019/02/02/netiquette/" rel="alternate" type="text/html" title="Netiquette RFC1855" /><published>2019-02-02T15:00:00+03:00</published><updated>2019-02-02T15:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/history/2019/02/02/netiquette</id><content type="html" xml:base="https://blog.falsetrue.io/blog/history/2019/02/02/netiquette/">&lt;p&gt;Netiquette is a series of paragraphs which was written faraway October 1996y by man named Sally Hambridge. Document describes principles of network conversations using emails and other aspects of messaging. For one hand is nothing special for today that this rfc document is not even mentioned on github, on other hand, in this new network which was significantly changed since 96 or even 2005 very few people may effective utilize email conversation, not to mention various instant messaging systems. This document can help to improve not only your skill, but can make you and your recipients be more professinal and effective.&lt;/p&gt;

&lt;p&gt;That’s why I’ve just created repo with this RFC1855 &lt;a href=&quot;https://github.com/noroot/netiquette/&quot;&gt;netiquette&lt;/a&gt; and I literally &lt;strong&gt;Request your For Comments&lt;/strong&gt; (which is RFC stands for.)&lt;/p&gt;

&lt;p&gt;If you prefer more entertained path, you may first want to look at this detailed videoreview of netiquette by Bryan Lunduke. (go more for it)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6YMbyuO8x4A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;RU:&lt;/p&gt;

&lt;p&gt;Netiquette это написанный в 1996 году &lt;a href=&quot;https://tools.ietf.org/html/rfc1855&quot;&gt;документ&lt;/a&gt; мистером Sally Hambridge. Документ описывает принципы общения в сети по email, и разные другие аспекты обмена сообщениями. С одной стороны удивительно что сегодня этот документ не упомянут даже на github, с другой в этом новой сети которая сильно отличатеся того того что было в 96 и даже 2005 году, мало кто стремится быть эффективным в общении, это особенно касается instant messenge’ров, а про email сегодня можно констатировать что единицы могут корректно и эффективно общаться по нему.&lt;/p&gt;

&lt;p&gt;Поэтому сделал копию нетикета на гитхабе &lt;a href=&quot;https://github.com/noroot/netiquette/&quot;&gt;netiquette&lt;/a&gt; и призываю ее покоментировать, чтобы создать новый документ актуальный в современной сети.&lt;/p&gt;

&lt;p&gt;Другие документы Sally Hambridge:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc3098&quot;&gt;A Set of Guidelines for Mass Unsolicited Mailings and Postings (spam*)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc2635&quot;&gt;How to Advertise Responsibly Using E-Mail and Newsgroups&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Netiquette is a series of paragraphs which was written faraway October 1996y by man named Sally Hambridge. Document describes principles of network conversations using emails and other aspects of messaging. For one hand is nothing special for today that this rfc document is not even mentioned on github, on other hand, in this new network which was significantly changed since 96 or even 2005 very few people may effective utilize email conversation, not to mention various instant messaging systems. This document can help to improve not only your skill, but can make you and your recipients be more professinal and effective.</summary></entry><entry><title type="html">Rails + Webpack + Stimulus + Bootstrap 4</title><link href="https://blog.falsetrue.io/blog/dev/2019/01/26/rails-webpack-stimulus/" rel="alternate" type="text/html" title="Rails + Webpack + Stimulus + Bootstrap 4" /><published>2019-01-26T15:40:00+03:00</published><updated>2019-01-26T15:40:00+03:00</updated><id>https://blog.falsetrue.io/blog/dev/2019/01/26/rails-webpack-stimulus</id><content type="html" xml:base="https://blog.falsetrue.io/blog/dev/2019/01/26/rails-webpack-stimulus/">&lt;p&gt;Сделал сборку &lt;strong&gt;Rails&lt;/strong&gt; со &lt;strong&gt;StimluluJS&lt;/strong&gt;, последней версией любимым мной frontend фреймворком &lt;strong&gt;bootstrap4&lt;/strong&gt; и чтобы все это собиралось Webpack’ом.
Turbolinks в комплекте, подключается отдельно в &lt;strong&gt;packs/application.js&lt;/strong&gt;. Стоит обратить внимание что рельсовые rails-ujs и turoblinks ставяться через &lt;strong&gt;yarn&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;что-это-такое-&quot;&gt;Что это такое ?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stimulusjs.org&quot;&gt;StimulusJS&lt;/a&gt; - это такой javascript фреймворк, мини Angular если хотите, позволяющий быстро встраивать себя в приложение.
Основные постулаты StimulusJS описаны тут https://stimulusjs.org/handbook/origin&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getbootstrap.com/docs/4.2/&quot;&gt;Bootstrap 4.2&lt;/a&gt; - CSS framework главная особенность которого это набор базовых компоненто и grid который позволяет быстро делать адаптивную верстку, поддерживает flexbox.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; - Сборщик frontend стека, без которого сегодня необходиться ни один вебпроект.&lt;/p&gt;

&lt;h2 id=&quot;как-пользоваться-&quot;&gt;Как пользоваться ?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;и в соседнем терминале &lt;code class=&quot;highlighter-rouge&quot;&gt;./bin/webpack-dev-server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github &lt;a href=&quot;https://github.com/noroot/rails-stimulus-bootstrap-starter-pack&quot;&gt;https://github.com/noroot/rails-stimulus-bootstrap-starter-pack&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Сделал сборку Rails со StimluluJS, последней версией любимым мной frontend фреймворком bootstrap4 и чтобы все это собиралось Webpack’ом. Turbolinks в комплекте, подключается отдельно в packs/application.js. Стоит обратить внимание что рельсовые rails-ujs и turoblinks ставяться через yarn.</summary></entry><entry><title type="html">Книга: Bullshit Jobs: A Theory</title><link href="https://blog.falsetrue.io/blog/books/2018/12/21/bullshit-jobs/" rel="alternate" type="text/html" title="Книга: Bullshit Jobs: A Theory" /><published>2018-12-21T21:30:00+03:00</published><updated>2018-12-21T21:30:00+03:00</updated><id>https://blog.falsetrue.io/blog/books/2018/12/21/bullshit-jobs</id><content type="html" xml:base="https://blog.falsetrue.io/blog/books/2018/12/21/bullshit-jobs/">&lt;p&gt;Книга Bullshit Jobs: A Theory&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Provisional Definition 2: a bullshit job is a form of employment that is so completely pointless, unnecessary, or pernicious that even the employee cannot justify its existence”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ко второму тысячилетию люди начали задумываться о том что работать просто за деньги не достаочно, и даже дегенеративно опасно для себя. Кроме этого с биологической точки зрения организм будет стремится минимизировать расходы на то что не интересно, а интерес заключается не только в результате, но и в процессе, а процесс не только должен быть, а должен быть интересным, такая замкнутая пульсация рождает вопросы в умах многих, но не все из многих доходят до какиех-то действий по этому поводу, и уж тем более до написания книги. David Graeber смог. В книге описаны примеры того как происходит деградация в работе, как работающие люди не чувствуют что их работа нужна им или обществу, и соотвествено не делают ее, или минимизируют ее.&lt;/p&gt;

&lt;p&gt;Ссылка и видео интервью под катом.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Книга Bullshit Jobs: A Theory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/51m3rdD-UPL._SL500_.jpg&quot; alt=&quot;https://m.media-amazon.com/images/I/51m3rdD-UPL._SL500_.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.audible.com/pd/Bullshit-Jobs-Audiobook/B079YY41HL&quot;&gt;Ссылка на книгу&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Видео интервью автора книги:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kikzjTfos0s&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Книга Bullshit Jobs: A Theory</summary></entry><entry><title type="html">Сеть с помощью mknod</title><link href="https://blog.falsetrue.io/blog/tips/linux/2018/11/27/mknod-network/" rel="alternate" type="text/html" title="Сеть с помощью mknod" /><published>2018-11-27T01:00:00+03:00</published><updated>2018-11-27T01:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/tips/linux/2018/11/27/mknod-network</id><content type="html" xml:base="https://blog.falsetrue.io/blog/tips/linux/2018/11/27/mknod-network/">&lt;p&gt;Как скачать содержимое, если wget curl или любые другие стандартные инструменты недоступны.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mknod&lt;/span&gt; /dev/tcp/ c 30 36
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;5&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/tcp/falsetrue.io/80

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET / HTTP/1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;5
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &amp;lt;&amp;amp;5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;В результе получим “наружу” содержимое ответа.&lt;/p&gt;

&lt;p&gt;Точно также можно делать и остальные запросы, вот пример запроса на ntp&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &amp;lt;/dev/tcp/time.nist.gov/13

58448 18-11-26 22:50:05 00 0 0 420.8 UTC&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NIST&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Подбробнее про /dev тут https://www.tldp.org/LDP/abs/html/devref1.html&lt;/p&gt;</content><author><name></name></author><summary type="html">Как скачать содержимое, если wget curl или любые другие стандартные инструменты недоступны.</summary></entry><entry><title type="html">CTF Квест</title><link href="https://blog.falsetrue.io/blog/security/2018/11/24/wallarm-quest/" rel="alternate" type="text/html" title="CTF Квест" /><published>2018-11-24T18:00:00+03:00</published><updated>2018-11-24T18:00:00+03:00</updated><id>https://blog.falsetrue.io/blog/security/2018/11/24/wallarm-quest</id><content type="html" xml:base="https://blog.falsetrue.io/blog/security/2018/11/24/wallarm-quest/">&lt;p&gt;На конференции highload 2018, компания wallarm делала и досих пор доступен для прохождения ctf квест.
Ниже описание некоторых забавных моментов и сути этого контеста, под катом спойлеры. А в конце ссылки.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; .----------------.  .----------------.  .----------------. 
| .--------------. || .--------------. || .--------------. |
| |     ______   | || |  _________   | || |  _________   | |
| |   .' ___  |  | || | |  _   _  |  | || | |_   ___  |  | |
| |  / .'   \_|  | || | |_/ | | \_|  | || |   | |_  \_|  | |
| |  | |         | || |     | |      | || |   |  _|      | |
| |  \ `.___.'\  | || |    _| |_     | || |  _| |_       | |
| |   `._____.'  | || |   |_____|    | || | |_____|      | |
| |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------' 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;p&gt;Что такое CTF квесты вообще ?&lt;/p&gt;

&lt;p&gt;Обычно это не которые задания по получению доступа к определенным системам или ее частям. Подобные квесты проводят в осовном security компании занимающиейся информационной безопасностью с целью нанять новых сотрудников, другими словами решая квесты по показываете что у вас есть скиллэто делать. А навыки эти полезны для этим компаниям, другими словами это геймификация проверки необходимого скилла, без нарушения чьих либо прав. Появилось это все конечно не сегодня, а намного раньше, - crackme были небольшие программы для проверки реверс инженеринг скилла, и раньше они в основном использовались для того чтобы показать разные техники защиты и обхода ограничений.&lt;/p&gt;

&lt;p&gt;Концепция квеста от Wallarm&lt;/p&gt;

&lt;p&gt;Вы подключаетесь за некую Сьюзен, и помогаете ей получить доступ&lt;/p&gt;

&lt;p&gt;Чтобы получить задание нужно подключиться по ssh к серверу, все начинается с безобидного:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
escape.myctf.ru
port: 22
username: suzen1
password: suzen1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh suzen1@escape.myctf.ru

suzen1@escape.myctf.ru's password:

####################################
#                                  #
#       Hello! It's level 1        #
#   try something of cat, ls, cd   #
#                                  #
####################################
~ $ ls
diary.txt
~ $ cat diary.txt
Привет! Меня зовут Сьюзен и это мой дневник...

День 1:

Потыкав на клавиши я заставила-таки эту железяку зажечь свой экран.
На рабочем столе оказалась карточка с надписью:

IxWJeqKOR80ZfaxUr15vL7i6tbWz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*Пароль специально изменен чтобы небыло желания копипасить без прохождения.&lt;/p&gt;

&lt;h2 id=&quot;2-уровень&quot;&gt;2 Уровень&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;suzen2@escape.myctf.ru's password:

####################################
#                                  #
#       Hello! It's level 2        #
#        try something of          #
#  ls|cd|cat|less|more|head|tail   #
#  to read password from homedir   #
#                                  #
# Read Suzen diary for the details #
#                                  #
####################################
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ ls
#~o         )~:         :(          :S          :~(         :~@         :~Q         &amp;lt;:3)~       =P          O:~)        ~,~
$diary.txt  *&amp;lt;:o)       :)          :_(         :~)         :~B         :~o         =(          =^.^=       XD          ~:0
(*v*)       *~*         :*          :o          :~)(~:      :~D         :~|         =)          =~O         X~(
(.V.)       -$          :*)         :o3         :~)*        :~E         :~∕         =8)         &amp;gt;:)         X~p
(~:         8~)         :&amp;gt;          :~#         :~*         :~J         ;)          =D          B~)         ^_^
(~}{~)      :'(         :P          :~&amp;amp;         :~&amp;gt;         :~P         ;~)         =O          O.o         |~O
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ cat $diary.txt
cat: can't open '.txt': No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ cat *.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;

Привет! Меня зовут Сьюзен и это мой дневник...

День 2:

Пароль, который я нашла на рабочем столе помог мне выбраться из этой страшной комнаты через неприметную дверь в углу.
Я долго вводила его в терминал, ведь знаете, моими маленькими пальчиками не очень то просто было нажимать эти тугие клавиши!

Выйдя из комнаты я очутилась в длинном темном коридоре. Как только я отпустила дверь она захлопнулась, оставив меня в кромешной тьме.
Делать то нечего, пришлось идти вперед.

Держась за стену и чувствуя ее неровности шла все дальше и дальше, потеряв счет времени и пространству...

Эти лица... они повсюду... они смотрят на меня....

Мне нужно найти ответ среди этих закорючек....

Я чувствую, что содержимое у них имеет одинаковый размер, но только в одном из них я смогу найти что-то полезное...
&lt;/pre&gt;

&lt;p&gt;Тут все просто нужно посомтреть на файлы повнимательнее, и понять в каком файле пароли и как его выевести на экране с помошью доступных инструментов, определеным образом экранируя спецсимволы в названии файла.&lt;/p&gt;

&lt;h3 id=&quot;3-уровень&quot;&gt;3 уровень&lt;/h3&gt;

&lt;p&gt;suzen3&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;####################################
#                                  #
#       Hello! It's level 3        #
#        only ls, really??         #
#                                  #
####################################
~ $ ls
-diary.txt-
~ $ ls -la
total 12
-rw-r--r--    1 root     root           728 Nov  7 14:01 -diary.txt-
drwxr-xr-x    1 root     root          4096 Nov  7 15:21 .
drwxr-xr-x    1 root     root          4096 Oct 31 13:46 ..

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Просто так прочитать файл -diary-.txt неполучится, нужно придумать способ как сделать это с помошью доступных инструментов, а доступно не так много:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ $ ls -la /bin/
total 2116
drwxr-xr-x    1 root     root          4096 Nov  7 15:24 .
drwxr-xr-x    1 root     root          4096 Nov 23 10:48 ..
-rwxr-xr-x    1 root     root           307 Oct 31 16:17 hello
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 ls
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Подсказывать тут нечего, набор инструментов намекает на прямой вариант сделать это unxiway способом.&lt;/p&gt;

&lt;p&gt;Идея понятна, на каждом хосте надо выполнить опредленные действия чтобы получить пароль к следующему хосту. Собственно я хотел рассказать в этой заметке не о самом контесте, а о конкретных заданиях и решениях.&lt;/p&gt;

&lt;p&gt;C 4 уровня начинаются интересные задачи, и вот одно из них&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.----------------.  .----------------.  .----------------.  .----------------.  .-----------------.
 .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
 |    _______   | || | _____  _____ | || |   ________   | || |  _________   | || | ____  _____  | |
 |   /  ___  |  | || ||_   _||_   _|| || |  |  __   _|  | || | |_   ___  |  | || ||_   \|_   _| | |
 |  |  (__ \_|  | || |  | |    | |  | || |  |_/  / /    | || |   | |_  \_|  | || |  |   \ | |   | |
 |   '.___`-.   | || |  | '    ' |  | || |     .'.' _   | || |   |  _|  _   | || |  | |\ \| |   | |
 |  |`\____) |  | || |   \ `--' /   | || |   _/ /__/ |  | || |  _| |___/ |  | || | _| |_\   |_  | |
 |  |_______.'  | || |    `.__.'    | || |  |________|  | || | |_________|  | || ||_____|\____| | |
 |              | || |              | || |              | || |              | || |              | |
 '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
'----------------'  '----------------'  '----------------'  '----------------'  '----------------'



Взрослые дяди ушли, а мне было очень скучно. Я так люблю рисовать, а ты?


...когда они вернулись я порвала рисунок на мелкие кусочки!!! Фиг им с маслом!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Здесь файл diary.txt наполнен вот такими строками:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...

       | |
| |
       | |
| |
       | |
| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------
&lt;span class=&quot;gd&quot;&gt;-------' |
&lt;/span&gt;| '-------


...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Не трудно догадаться что из них нужно составить подобного рода ASCII art изображение с буквами которое и будет содержать пароль.
Задачу можно сделать разными способами и инструментов доступно много:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
drwxr-xr-x    1 root     root          4096 Nov 23 11:11 ..
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 awk
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 cat
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 cut
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 find
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 fold
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 grep
-rwxr-xr-x    1 root     root          1498 Oct 31 21:03 hello
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 less
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 ls
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 mv
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 rm
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 sed
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 sh
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 sort
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 split
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 tr
-rwxr-xr-x    1 root     root       1075464 Oct  1 22:37 uniq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Нужно анализировать файл подсчитать параметры ascii символов, понять из чего состояит буква, и сделать парсер на awk который разберет “разрезаный” файл и на выходе даст буквы. Я сделал на AWK. Единстванная подсказка, это то, что на этом уровне все буквы uppercase, оно и понятно иначе бы пришлось заморачиваться с более сложным ascii artом.&lt;/p&gt;

&lt;p&gt;Этот AWK скрипт позволяет выводить одну букву из файла, по указанному смещению.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BEGIN {

    sx = 1
    fx_lim = 0
    fx = 28
    t = 56

}
{
    a = $0
    if (fx == fx_lim || fx == (fx_lim+1) || fx == t) {
        printf &quot;%s&quot;,a,fx
        if (sx == 2) {
            printf &quot;\n&quot;
            sx = 0
        }
        sx++

    }

    if (fx == t) {
        fx = 0
    }
    fx++

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Запускаем и получем собранную букву, естественно можно сделать чтобы скрипт выводил слово целиком, осталвлю это для вас.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk -f scrpit.awk file.txt

 .----------------.
| .--------------. |
| |   _____      | |
| |  |_   _|     | |
| |    | |       | |
| |    | |   _   | |
| |   _| |__/ |  | |
| |  |________|  | |
| |              | |
| '--------------' |
 '----------------'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Еще задание в котором нужно найти пароль в pcap файле (сетевой дамп), может быть решено даже без tcpdump. Как это не банально смешно, но можно прочитать файл визуально найдя там похожие паттерны и словно нео в матрице, увидеть нужные символы, так сделал и я и это сработало.&lt;/p&gt;

&lt;p&gt;Часть дампа с пометкой найденного символа и таких строк ровно столько сколько пароли.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wallarm-ctf-dump.png&quot; alt=&quot;wallarm-ctf-dump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По скольку к этому моменту вы скорее всего уже прошли несколько уровней и знаете как выглядят пароли, вы могли заметить что все пароли это 28 символов, и все они кончаются на “K”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wallarm-ctf-pw-pattern.png&quot; alt=&quot;wallarm-ctf-pw-pattern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это делает поиск паролей еще проще, так как мы ожидаем что следующие пароли будут такими же и соотвественно будем искать строки которые удовлетворяют этому условию.&lt;/p&gt;

&lt;p&gt;Еще одно интересное задание,- это сделать HTTP GET запрос без доступных доступных инструментов, таких как curl, wget, без компиляторов, без встроенного системонго perl’a (без GET), без консольных браузеров, то есть сделать запрос используя только системные базовые инструменты на голой системе. Казалось бы это не возможно, но решение есть, особенно для тех кто понимает как устроена система устройств (dev filesystem) в linux.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wallarm-ctf-get.png&quot; alt=&quot;wallarm-ctf-get&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Были и другие квесты, описывать их здесь не буду, пробуйте сами, доступ на первый уровень дан выше.&lt;/p&gt;

&lt;p&gt;Где узнать больше ?&lt;/p&gt;

&lt;p&gt;Канал в ТГ: &lt;a href=&quot;https://t.me/wallarm_highload&quot;&gt;wallarm_highload&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Бывают ли другие ?&lt;/p&gt;

&lt;p&gt;Да полно, &lt;a href=&quot;https://ctftime.org/&quot;&gt;ctftime&lt;/a&gt; , от Google &lt;a href=&quot;https://capturetheflag.withgoogle.com/&quot;&gt;Google CTF&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">На конференции highload 2018, компания wallarm делала и досих пор доступен для прохождения ctf квест. Ниже описание некоторых забавных моментов и сути этого контеста, под катом спойлеры. А в конце ссылки.</summary></entry><entry><title type="html">Обновил Jekyll</title><link href="https://blog.falsetrue.io/blog/jekyll/2018/09/22/welcome-to-jekyll/" rel="alternate" type="text/html" title="Обновил Jekyll" /><published>2018-09-22T19:00:15+03:00</published><updated>2018-09-22T19:00:15+03:00</updated><id>https://blog.falsetrue.io/blog/jekyll/2018/09/22/welcome-to-jekyll</id><content type="html" xml:base="https://blog.falsetrue.io/blog/jekyll/2018/09/22/welcome-to-jekyll/">&lt;p&gt;Обновил Jekyll и вообще.&lt;/p&gt;</content><author><name></name></author><summary type="html">Обновил Jekyll и вообще.</summary></entry><entry xml:lang="ru"><title type="html">Книга: Unfuck yourself</title><link href="https://blog.falsetrue.io/blog/books/2018/06/23/unfuck-yourself/" rel="alternate" type="text/html" title="Книга: Unfuck yourself" /><published>2018-06-23T15:50:00+03:00</published><updated>2018-06-23T15:50:00+03:00</updated><id>https://blog.falsetrue.io/blog/books/2018/06/23/unfuck-yourself</id><content type="html" xml:base="https://blog.falsetrue.io/blog/books/2018/06/23/unfuck-yourself/">&lt;ul&gt;
  &lt;li&gt;Название: Unfuck yourself&lt;/li&gt;
  &lt;li&gt;Автор: Gary John Bishop&lt;/li&gt;
  &lt;li&gt;Год: 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Неплохая книга и короткая книга которая повторяет почти все одно что было в The Subtle Art of Not Giving a F*ck (о которой напишу позже).
Хороша она тем, что не повторяет одно и тоже, и за 3 часа рассказывает “изъезжеенную” тему так, что больше к этому возвращатся не хочется.
Книга не про продуктиность, и не про обучение, - чистый “высер”, но в хорошем смысле слова.&lt;/p&gt;

&lt;p&gt;Картинка обложки и ссылка под катом.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;https://www.audible.com/pd/Self-Development/Unfu-k-Yourself-Audiobook/B0731R4RFX?ref=a_a_library_c4_libItem_7_B0731R4RFX&amp;amp;pf_rd_p=ae76b2bb-e63d-4a67-b357-dab3dee05ca1&amp;amp;pf_rd_r=YGP1NQE4EWQJTWA39HAC&quot;&gt;Unfuck Yourself&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images-na.ssl-images-amazon.com/images/I/41HAaBdPbgL._SX309_BO1,204,203,200_.jpg&quot; alt=&quot;Unfuck Yourself&quot; title=&quot;Unfuck yourself&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Название: Unfuck yourself Автор: Gary John Bishop Год: 2017</summary></entry></feed>