```
  __       _          _                     _
 / _| __ _| |___  ___| |_ _ __ _   _  ___  (_) ___
| |_ / _` | / __|/ _ \ __| '__| | | |/ _ \ | |/ _ \
|  _| (_| | \__ \  __/ |_| |  | |_| |  __/_| | (_) |
|_|  \__,_|_|___/\___|\__|_|   \__,_|\___(_)_|\___/

== [Gemini capsule] * ============ [ 2013-09-05 ] ==
```
=> / ← Back
# Arduino music - проигрывание музыки на платформе Ардиуно

Долго лежала в тумбочке моя Arduino, преждем чем я достал ее и решил хоть что нибудь попробовать, ну и попробовал издавать с помощью нее какие нибудь звуки.

Для этого я нашел какуюто старую пьезо пищалку и срочно прикрепил ее на breadboard, подключил ее к arduino написал немного кода, и вот что получилось:

В планах наверное подключить туда клавиатуру, чтобы сделать синтезатор, чтобы можно было делать

=> http://en.wikipedia.org/wiki/Chiptune chiptune

Исходники под катом и на гитхабе

=> https://github.com/noroot/arduinostuff https://github.com/noroot/arduinostuff

, код не мой, взял с гугла источник уже непомню, но код немного исправил.

Для тех кто не знает что такое

=> http://arduino.cc Arduino

, - это такая opensource hardware платформа для программирования микроконтроллеров, выглядит она так:

Файл pitches.h можно взять здесь

=> https://github.com/noroot/arduinostuff/blob/master/lib/pitches.h https://github.com/noroot/arduinostuff/blob/master/lib/pitches.h

```

#include <pitches.h>



#define melodyPin 3

//Mario main theme melody

int melody[] = {

  NOTEE7, NOTEE7, 0, NOTE_E7,

  0, NOTEC7, NOTEE7, 0,

  NOTE_G7, 0, 0,  0,

  NOTE_G6, 0, 0, 0,

  NOTEC7, 0, 0, NOTEG6,

  0, 0, NOTE_E6, 0,

  0, NOTEA6, 0, NOTEB6,

  0, NOTEAS6, NOTEA6, 0,

  NOTEG6, NOTEE7, NOTE_G7,

  NOTEA7, 0, NOTEF7, NOTE_G7,

  0, NOTEE7, 0,NOTEC7,

  NOTED7, NOTEB6, 0, 0,

  NOTEC7, 0, 0, NOTEG6,

  0, 0, NOTE_E6, 0,

  0, NOTEA6, 0, NOTEB6,

  0, NOTEAS6, NOTEA6, 0,

  NOTEG6, NOTEE7, NOTE_G7,

  NOTEA7, 0, NOTEF7, NOTE_G7,

  0, NOTEE7, 0,NOTEC7,

  NOTED7, NOTEB6, 0, 0

};

//Mario main them tempo

int tempo[] = {

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  9, 9, 9,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

  9, 9, 9,

  12, 12, 12, 12,

  12, 12, 12, 12,

  12, 12, 12, 12,

};

//

//Underworld melody

int underworld_melody[] = {

  NOTEC4, NOTEC5, NOTEA3, NOTEA4,

  NOTEAS3, NOTEAS4, 0,

  0,

  NOTEC4, NOTEC5, NOTEA3, NOTEA4,

  NOTEAS3, NOTEAS4, 0,

  0,

  NOTEF3, NOTEF4, NOTED3, NOTED4,

  NOTEDS3, NOTEDS4, 0,

  0,

  NOTEF3, NOTEF4, NOTED3, NOTED4,

  NOTEDS3, NOTEDS4, 0,

  0, NOTEDS4, NOTECS4, NOTE_D4,

  NOTECS4, NOTEDS4,

  NOTEDS4, NOTEGS3,

  NOTEG3, NOTECS4,

  NOTEC4, NOTEFS4,NOTEF4, NOTEE3, NOTEAS4, NOTEA4,

  NOTEGS4, NOTEDS4, NOTE_B3,

  NOTEAS3, NOTEA3, NOTE_GS3,

  0, 0, 0

};

//Underwolrd tempo

int underworld_tempo[] = {

  12, 12, 12, 12,

  12, 12, 6,

  3,

  12, 12, 12, 12,

  12, 12, 6,

  3,

  12, 12, 12, 12,

  12, 12, 6,

  3,

  12, 12, 12, 12,

  12, 12, 6,

  6, 18, 18, 18,

  6, 6,

  6, 6,

  6, 6,

  18, 18, 18,18, 18, 18,

  10, 10, 10,

  10, 10, 10,

  3, 3, 3

};

void setup(void)

{

   pinMode(3, OUTPUT);//buzzer

   pinMode(13, OUTPUT);//led indicator when singing a note

}

void loop()

{

//sing the tunes

//  sing(1);

//  sing(1);

  sing(2);

}

int song = 0;

void sing(int s){

   // iterate over the notes of the melody:

   song = s;

   if(song==2){

     Serial.println(" 'Underworld Theme'");

     int size = sizeof(underworld_melody) / sizeof(int);

     for (int thisNote = 0; thisNote < size; thisNote++) {

       // to calculate the note duration, take one second

       // divided by the note type.

       //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.

       int noteDuration = 1000/10;

       //underworld_tempo[thisNote];

       buzz(melodyPin, underworld_tempo[thisNote],noteDuration);

       // to distinguish the notes, set a minimum time between them.

       // the note's duration + 30% seems to work well:

       int pauseBetweenNotes = noteDuration * 1.30;

       delay(pauseBetweenNotes);

       // stop the tone playing:

       buzz(melodyPin, 0,noteDuration);

    }

   }else{

     Serial.println(" 'Mario Theme'");

     int size = sizeof(melody) / sizeof(int);

     for (int thisNote = 0; thisNote < size; thisNote++) {

       // to calculate the note duration, take one second

       // divided by the note type.

       //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.

       int noteDuration = 1000/tempo[thisNote];

       buzz(melodyPin, melody[thisNote],noteDuration);

       // to distinguish the notes, set a minimum time between them.

       // the note's duration + 30% seems to work well:

       int pauseBetweenNotes = noteDuration * 1.30;

       delay(pauseBetweenNotes);

       // stop the tone playing:

       buzz(melodyPin, 0,noteDuration);

    }

  }

}

void buzz(int targetPin, long frequency, long length) {

  digitalWrite(13,HIGH);

  long delayValue = 1000000/frequency/2; // calculate the delay value between transitions

  //// 1 second's worth of microseconds, divided by the frequency, then split in half since

  //// there are two phases to each cycle

  long numCycles = frequency * length/ 1000; // calculate the number of cycles for proper timing

  //// multiply frequency, which is really cycles per second, by the number of seconds to 

  //// get the total number of cycles to produce

  for (long i=0; i < numCycles; i++){ // for the calculated length of time...

    digitalWrite(targetPin,HIGH); // write the buzzer pin high to push out the diaphram

    delayMicroseconds(delayValue); // wait for the calculated delay value

    digitalWrite(targetPin,LOW); // write the buzzer pin low to pull back the diaphram

    delayMicroseconds(delayValue); // wait again or the calculated delay value

  }

  digitalWrite(13,LOW);

}

```

```
     ░▒▓▓▒░  FalseTrue - dmth's notes | Gemini Capsule [-]  ░▒▓▓▒░
```
